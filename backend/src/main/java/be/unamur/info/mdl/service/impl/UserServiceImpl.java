package be.unamur.info.mdl.service.impl;

import be.unamur.info.mdl.dto.CredentialDTO;
import be.unamur.info.mdl.dto.PasswordChangeDTO;
import be.unamur.info.mdl.dto.UserDTO;
import org.springframework.beans.factory.annotation.Autowired;

import be.unamur.info.mdl.dal.entity.User;
import be.unamur.info.mdl.dal.repository.UserRepository;
import be.unamur.info.mdl.service.UserService;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;


class UserServiceImpl implements UserService {

    @Autowired // This means to get the bean called userRepository
	           // Which is auto-generated by Spring, we will use it to handle the data
	private UserRepository userRepository;


    @Override
    public boolean addUser(User newUser){
        userRepository.save(newUser);
        return true;
    }

    @Override
    public boolean login(CredentialDTO userLogin){
        UserDTO userEntity = userRepository.findByUsername(userLogin.getUsername()).toDTO();
        if(checkPassword(userLogin,userEntity)) return true;
        return false;
    }

    private boolean checkPassword(CredentialDTO userLogin, UserDTO userEntity){
        BCryptPasswordEncoder encoder = new BCryptPasswordEncoder();
        return encoder.matches(userLogin.getPassword(),userEntity.getPassword());
    }

    @Override
    public boolean changePassword(String username, PasswordChangeDTO passwordChangeDTO){
        User user = userRepository.findByUsername(username);
        BCryptPasswordEncoder encoder = new BCryptPasswordEncoder();
        if(encoder.matches(passwordChangeDTO.getOldpwd(),user.toDTO().getPassword())){
            user.setPassword(passwordChangeDTO.getNewpwd());
            return true;
        }
        return false;
    }
}